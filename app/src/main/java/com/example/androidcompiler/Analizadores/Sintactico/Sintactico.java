
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package com.example.androidcompiler.Analizadores.Sintactico;

import java_cup.runtime.*;
import com.example.androidcompiler.Analizadores.Lexico.SintacticoSym;
import com.example.androidcompiler.Analizadores.Lexico.TError;
import com.example.androidcompiler.Analizadores.Lexico.Lexico;
import java.util.ArrayList;
import com.example.androidcompiler.Animaciones.Animacion;
import com.example.androidcompiler.Figuras.*;
import com.example.androidcompiler.Operadores.Operadores;

import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Sintactico extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return SintacticoSym.class;
}

  /** Default constructor. */
  @Deprecated
  public Sintactico() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Sintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\040\000\002\002\004\000\002\002\003\000\002\003" +
    "\003\000\002\003\004\000\002\003\005\000\002\003\003" +
    "\000\002\003\004\000\002\003\004\000\002\003\005\000" +
    "\002\010\002\000\002\003\006\000\002\005\015\000\002" +
    "\005\015\000\002\005\017\000\002\005\017\000\002\005" +
    "\021\000\002\004\014\000\002\004\014\000\002\007\003" +
    "\000\002\007\003\000\002\007\003\000\002\007\003\000" +
    "\002\007\003\000\002\007\003\000\002\007\003\000\002" +
    "\007\003\000\002\006\005\000\002\006\005\000\002\006" +
    "\005\000\002\006\005\000\002\006\005\000\002\006\003" +
    "" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\153\000\012\003\005\004\013\015\004\016\012\001" +
    "\002\000\014\022\055\023\060\024\057\025\054\026\056" +
    "\001\002\000\004\004\ufff8\001\002\000\004\004\047\001" +
    "\002\000\006\002\uffff\004\045\001\002\000\004\002\044" +
    "\001\002\000\004\002\000\001\002\000\004\017\015\001" +
    "\002\000\014\002\ufffc\003\005\004\013\015\004\016\012" +
    "\001\002\000\004\002\ufffb\001\002\000\004\020\016\001" +
    "\002\000\004\012\017\001\002\000\006\005\020\012\022" +
    "\001\002\000\016\006\uffe2\007\uffe2\010\uffe2\011\uffe2\013" +
    "\uffe2\014\uffe2\001\002\000\014\006\026\007\024\010\025" +
    "\011\030\014\035\001\002\000\006\005\020\012\022\001" +
    "\002\000\014\006\026\007\024\010\025\011\030\013\027" +
    "\001\002\000\006\005\020\012\022\001\002\000\006\005" +
    "\020\012\022\001\002\000\006\005\020\012\022\001\002" +
    "\000\016\006\uffe3\007\uffe3\010\uffe3\011\uffe3\013\uffe3\014" +
    "\uffe3\001\002\000\006\005\020\012\022\001\002\000\016" +
    "\006\uffe4\007\uffe4\010\uffe4\011\uffe4\013\uffe4\014\uffe4\001" +
    "\002\000\016\006\uffe7\007\uffe7\010\025\011\030\013\uffe7" +
    "\014\uffe7\001\002\000\016\006\uffe5\007\uffe5\010\uffe5\011" +
    "\uffe5\013\uffe5\014\uffe5\001\002\000\016\006\uffe6\007\uffe6" +
    "\010\025\011\030\013\uffe6\014\uffe6\001\002\000\006\005" +
    "\020\012\022\001\002\000\014\006\026\007\024\010\025" +
    "\011\030\014\037\001\002\000\006\021\040\026\041\001" +
    "\002\000\004\013\043\001\002\000\004\013\042\001\002" +
    "\000\004\004\ufff0\001\002\000\004\004\ufff1\001\002\000" +
    "\004\002\001\001\002\000\014\002\ufffe\003\005\004\013" +
    "\015\004\016\012\001\002\000\004\002\ufffd\001\002\000" +
    "\014\002\ufffa\003\005\004\013\015\004\016\012\001\002" +
    "\000\004\002\ufff9\001\002\000\004\004\052\001\002\000" +
    "\012\003\005\004\013\015\004\016\012\001\002\000\004" +
    "\002\ufff7\001\002\000\004\012\141\001\002\000\004\012" +
    "\130\001\002\000\004\012\115\001\002\000\004\012\102" +
    "\001\002\000\004\012\061\001\002\000\006\005\020\012" +
    "\022\001\002\000\014\006\026\007\024\010\025\011\030" +
    "\014\063\001\002\000\006\005\020\012\022\001\002\000" +
    "\014\006\026\007\024\010\025\011\030\014\065\001\002" +
    "\000\006\005\020\012\022\001\002\000\014\006\026\007" +
    "\024\010\025\011\030\014\067\001\002\000\022\027\070" +
    "\030\071\031\100\032\076\033\075\034\072\035\077\036" +
    "\074\001\002\000\004\013\uffef\001\002\000\004\013\uffee" +
    "\001\002\000\004\013\uffea\001\002\000\004\013\101\001" +
    "\002\000\004\013\uffe8\001\002\000\004\013\uffeb\001\002" +
    "\000\004\013\uffec\001\002\000\004\013\uffe9\001\002\000" +
    "\004\013\uffed\001\002\000\006\002\ufff5\004\ufff5\001\002" +
    "\000\006\005\020\012\022\001\002\000\014\006\026\007" +
    "\024\010\025\011\030\014\104\001\002\000\006\005\020" +
    "\012\022\001\002\000\014\006\026\007\024\010\025\011" +
    "\030\014\106\001\002\000\006\005\020\012\022\001\002" +
    "\000\014\006\026\007\024\010\025\011\030\014\110\001" +
    "\002\000\006\005\020\012\022\001\002\000\014\006\026" +
    "\007\024\010\025\011\030\014\112\001\002\000\022\027" +
    "\070\030\071\031\100\032\076\033\075\034\072\035\077" +
    "\036\074\001\002\000\004\013\114\001\002\000\006\002" +
    "\ufff4\004\ufff4\001\002\000\006\005\020\012\022\001\002" +
    "\000\014\006\026\007\024\010\025\011\030\014\117\001" +
    "\002\000\006\005\020\012\022\001\002\000\014\006\026" +
    "\007\024\010\025\011\030\014\121\001\002\000\006\005" +
    "\020\012\022\001\002\000\014\006\026\007\024\010\025" +
    "\011\030\014\123\001\002\000\006\005\020\012\022\001" +
    "\002\000\014\006\026\007\024\010\025\011\030\014\125" +
    "\001\002\000\022\027\070\030\071\031\100\032\076\033" +
    "\075\034\072\035\077\036\074\001\002\000\004\013\127" +
    "\001\002\000\006\002\ufff3\004\ufff3\001\002\000\006\005" +
    "\020\012\022\001\002\000\014\006\026\007\024\010\025" +
    "\011\030\014\132\001\002\000\006\005\020\012\022\001" +
    "\002\000\014\006\026\007\024\010\025\011\030\014\134" +
    "\001\002\000\006\005\020\012\022\001\002\000\014\006" +
    "\026\007\024\010\025\011\030\014\136\001\002\000\022" +
    "\027\070\030\071\031\100\032\076\033\075\034\072\035" +
    "\077\036\074\001\002\000\004\013\140\001\002\000\006" +
    "\002\ufff6\004\ufff6\001\002\000\006\005\020\012\022\001" +
    "\002\000\014\006\026\007\024\010\025\011\030\014\143" +
    "\001\002\000\006\005\020\012\022\001\002\000\014\006" +
    "\026\007\024\010\025\011\030\014\145\001\002\000\006" +
    "\005\020\012\022\001\002\000\014\006\026\007\024\010" +
    "\025\011\030\014\147\001\002\000\006\005\020\012\022" +
    "\001\002\000\014\006\026\007\024\010\025\011\030\014" +
    "\151\001\002\000\006\005\020\012\022\001\002\000\014" +
    "\006\026\007\024\010\025\011\030\014\153\001\002\000" +
    "\022\027\070\030\071\031\100\032\076\033\075\034\072" +
    "\035\077\036\074\001\002\000\004\013\155\001\002\000" +
    "\006\002\ufff2\004\ufff2\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\153\000\012\002\007\003\010\004\005\005\006\001" +
    "\001\000\002\001\001\000\004\010\050\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\002\013\003\010\004\005" +
    "\005\006\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\006\020\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\006\022\001\001\000\002\001" +
    "\001\000\004\006\033\001\001\000\004\006\032\001\001" +
    "\000\004\006\031\001\001\000\002\001\001\000\004\006" +
    "\030\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\006\035\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\002\045\003\010\004\005\005\006\001\001" +
    "\000\002\001\001\000\012\002\047\003\010\004\005\005" +
    "\006\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\002\052\003\010\004\005\005\006\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\006\061\001" +
    "\001\000\002\001\001\000\004\006\063\001\001\000\002" +
    "\001\001\000\004\006\065\001\001\000\002\001\001\000" +
    "\004\007\072\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\006\102\001\001\000" +
    "\002\001\001\000\004\006\104\001\001\000\002\001\001" +
    "\000\004\006\106\001\001\000\002\001\001\000\004\006" +
    "\110\001\001\000\002\001\001\000\004\007\112\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\006\115\001" +
    "\001\000\002\001\001\000\004\006\117\001\001\000\002" +
    "\001\001\000\004\006\121\001\001\000\002\001\001\000" +
    "\004\006\123\001\001\000\002\001\001\000\004\007\125" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\006" +
    "\130\001\001\000\002\001\001\000\004\006\132\001\001" +
    "\000\002\001\001\000\004\006\134\001\001\000\002\001" +
    "\001\000\004\007\136\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\006\141\001\001\000\002\001\001\000" +
    "\004\006\143\001\001\000\002\001\001\000\004\006\145" +
    "\001\001\000\002\001\001\000\004\006\147\001\001\000" +
    "\002\001\001\000\004\006\151\001\001\000\002\001\001" +
    "\000\004\007\153\001\001\000\002\001\001\000\002\001" +
    "\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



public Sintactico(Lexico lex){
super(lex);
}

 /*Almacenamos todos los errores en un lista*/
    public String resultado="";

    public ArrayList<Operadores> operadas = new ArrayList<>();
    public ArrayList<Figuras> figurass = new ArrayList<>();
	public ArrayList<TError> erroresLista = new ArrayList<>();
	public ArrayList<Animacion> animaciones = new ArrayList<>();

    private Symbol s;

    //Metodo que recupera un error en la sintaxis
    public void syntax_error(Symbol s){
        String lexema = s.value.toString();
        int fila = (s.right+1);
        int columna = (s.left+1);

        erroresLista.add(new TError(lexema,fila,columna,"Error Sintactico","Se esperaba graficar o animar"));
		System.out.println("Se encontro un Error Sintactico: "+lexema+", en la linea: "+fila+", en la columna: "+columna);

        //this.tokensEsperados = expected_token_ids();
		//this.symbol = symbol;
		//String descripcion = "Se esperaba: ";
		//for(int i=0;i<expected_token_ids().size();i++){
		//	descripcion+=" "+symbl_name_from_id(expected_token_ids().get(i))+",";
		//}

		//erroresLista.add(new TError(lexema,fila,columna,"Sintactico",descripcion));
        for(int i=0;i<erroresLista.size();i++){
        System.out.println("Imprimiendo errores: -----> "+erroresLista.get(i).toString());
        i++;        
        }

    }

    //Método al que se llama automáticamente ante algún error sintáctico en el que ya no es posible una recuperación de errores.
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
        System.out.println("Error síntactico irrecuperable en la Línea " + 
        (s.left+1)+ " Columna "+(s.right+1)+". Componente " + s.value + 
        " no reconocido."); 
    }
    
    //Metodo que recupera los errores
    public ArrayList<TError> getErrores(){
		return this.erroresLista;
	}

    //Metodo que recupera las ocurrencias
    public ArrayList<Operadores> getOperadas() {
        return operadas;
    }

    //Metodo que recupera las figuras a graficar
	public ArrayList<Figuras> getFigurass() {
        return figurass;
    }
	
	//Metodo que recupera las animaciones 
	public ArrayList<Animacion> getAnimaciones() {
        return animaciones;
    }

    //Metodo que devuelve un float de un objeto
    public float getFloat(Object object){
		return Float.valueOf(String.valueOf(object));
	}

    //Metodo que devuelve un int de un objeto
    public int getInt(Object object){
		return Integer.valueOf(String.valueOf(object));
	}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Sintactico$actions {



  private final Sintactico parser;

  /** Constructor */
  CUP$Sintactico$actions(Sintactico parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Sintactico$do_action_part00000000(
    int                        CUP$Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico$parser,
    java.util.Stack            CUP$Sintactico$stack,
    int                        CUP$Sintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintactico$result;

      /* select the action based on the action number */
      switch (CUP$Sintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= s EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String start_val = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT = start_val;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintactico$parser.done_parsing();
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // s ::= exp 
            {
              String RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("s",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // exp ::= graficar 
            {
              String RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // exp ::= graficar SALTO 
            {
              String RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // exp ::= graficar SALTO s 
            {
              String RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // exp ::= SALTO 
            {
              String RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // exp ::= SALTO s 
            {
              String RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // exp ::= animar SALTO 
            {
              String RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // exp ::= animar SALTO s 
            {
              String RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // NT$0 ::= 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
 System.out.println("Se encontro un ERROR SINTACTICO"); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$0",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // exp ::= error NT$0 SALTO s 
            {
              String RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // graficar ::= GRAF CIR PAA accion COMA accion COMA accion COMA color PAC 
            {
              String RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
                figurass.add(new Circulo(getFloat(a),getFloat(b),getFloat(c),String.valueOf(d),aleft));   
                System.out.println("Se grafico un: "+String.valueOf(f));
                System.out.println("Cadena leida correctamente!");
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("graficar",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-10)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // graficar ::= GRAF CUADRA PAA accion COMA accion COMA accion COMA color PAC 
            {
              String RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
                figurass.add(new Cuadrado(getFloat(a),getFloat(b),getFloat(c),String.valueOf(d),aleft));   
                System.out.println("Se grafico un: "+String.valueOf(f));
                System.out.println("Cadena leida correctamente!");
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("graficar",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-10)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // graficar ::= GRAF REC PAA accion COMA accion COMA accion COMA accion COMA color PAC 
            {
              String RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-11)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-11)).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-11)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int gleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int gright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String g = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
                figurass.add(new Rectangulo(getFloat(a),getFloat(b),getFloat(c),getFloat(d),String.valueOf(g),aleft));   
                System.out.println("Se grafico un: "+String.valueOf(f));
                System.out.println("Cadena leida correctamente");
            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("graficar",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-12)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // graficar ::= GRAF LINE PAA accion COMA accion COMA accion COMA accion COMA color PAC 
            {
              String RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-11)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-11)).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-11)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int gleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int gright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String g = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
                figurass.add(new Linea(getFloat(a),getFloat(b),getFloat(c),getFloat(d),String.valueOf(g),aleft));   
                System.out.println("Se grafico un: "+String.valueOf(f));
                System.out.println("Cadena leida correctamente");
            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("graficar",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-12)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // graficar ::= GRAF POL PAA accion COMA accion COMA accion COMA accion COMA accion COMA color PAC 
            {
              String RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-13)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-13)).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-13)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-11)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-11)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-11)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int gleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int gright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String g = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String h = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
                figurass.add(new Poligono(getFloat(a),getFloat(b),getFloat(c),getFloat(d),getInt(g),String.valueOf(h),aleft));   
                System.out.println("Se grafico un: "+String.valueOf(f));
                System.out.println("Cadena leida correctamente");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("graficar",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-14)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // animar ::= ANI OBJ ANT PAA accion COMA accion COMA CUR PAC 
            {
              String RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("animar",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // animar ::= ANI OBJ ANT PAA accion COMA accion COMA LINE PAC 
            {
              String RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("animar",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // color ::= CAZ 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=a; System.out.println("color es: "+RESULT); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("color",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // color ::= CR 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=a; System.out.println("color es: "+RESULT); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("color",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // color ::= CV 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=a; System.out.println("color es: "+RESULT); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("color",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // color ::= CAM 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=a; System.out.println("color es: "+RESULT); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("color",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // color ::= CNA 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=a; System.out.println("color es: "+RESULT); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("color",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // color ::= CM 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=a; System.out.println("color es: "+RESULT); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("color",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // color ::= CC 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=a; System.out.println("color es: "+RESULT); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("color",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // color ::= CNE 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=a; System.out.println("color es: "+RESULT); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("color",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // accion ::= accion SUMA accion 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 double valor1 =Double.parseDouble(a); 
                                    double valor2 =Double.parseDouble(b); 
                                    double r=valor1 + valor2;
                                    RESULT=String.valueOf(r);
                                    System.out.println("Resultado es: "+RESULT); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("accion",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // accion ::= accion RESTA accion 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 double valor1 =Double.parseDouble(a); 
                                    double valor2 =Double.parseDouble(b); 
                                    double r= valor1-valor2;
                                    RESULT=String.valueOf(r);
                                    System.out.println("Resultado es: "+RESULT); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("accion",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // accion ::= accion MUL accion 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 double valor1 =Double.parseDouble(a); 
                                    double valor2 =Double.parseDouble(b); 
                                    double r= valor1*valor2;
                                    RESULT=String.valueOf(r);
                                    System.out.println("Resultado es: "+RESULT); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("accion",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // accion ::= accion DIV accion 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 double valor1 =Double.parseDouble(a); 
                                    double valor2 =Double.parseDouble(b); 
                                    double r= valor1/valor2;
                                    RESULT=String.valueOf(r);
                                    System.out.println("Resultado es: "+RESULT); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("accion",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // accion ::= PAA accion PAC 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT =a; System.out.println("Parentesis en accion: "+RESULT);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("accion",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // accion ::= NUMERO 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=a; System.out.println("NUMERO INGRESADO es: "+RESULT); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("accion",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Sintactico$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Sintactico$do_action(
    int                        CUP$Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico$parser,
    java.util.Stack            CUP$Sintactico$stack,
    int                        CUP$Sintactico$top)
    throws java.lang.Exception
    {
              return CUP$Sintactico$do_action_part00000000(
                               CUP$Sintactico$act_num,
                               CUP$Sintactico$parser,
                               CUP$Sintactico$stack,
                               CUP$Sintactico$top);
    }
}

}
