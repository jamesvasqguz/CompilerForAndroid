
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package com.example.androidcompiler.Analizadores.Sintactico;

import java_cup.runtime.*;
import com.example.androidcompiler.Analizadores.Lexico.*;
import com.example.androidcompiler.Operadores.Ocurrencia;
import com.example.androidcompiler.Animaciones.Animacion;
import java.util.ArrayList;
import com.example.androidcompiler.Figuras.*;
import com.example.androidcompiler.Analizadores.Lexico.TError;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Sintactico extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return SintacticoSym.class;
}

  /** Default constructor. */
  @Deprecated
  public Sintactico() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Sintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\037\000\002\002\004\000\002\002\003\000\002\003" +
    "\003\000\002\003\004\000\002\003\005\000\002\003\003" +
    "\000\002\003\004\000\002\003\016\000\002\010\002\000" +
    "\002\003\006\000\002\005\015\000\002\005\015\000\002" +
    "\005\017\000\002\005\017\000\002\005\021\000\002\004" +
    "\003\000\002\004\003\000\002\007\003\000\002\007\003" +
    "\000\002\007\003\000\002\007\003\000\002\007\003\000" +
    "\002\007\003\000\002\007\003\000\002\007\003\000\002" +
    "\006\005\000\002\006\005\000\002\006\005\000\002\006" +
    "\005\000\002\006\005\000\002\006\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\152\000\012\003\005\004\012\016\004\017\011\001" +
    "\002\000\014\023\054\024\057\025\055\026\053\027\056" +
    "\001\002\000\004\004\ufff9\001\002\000\006\002\uffff\004" +
    "\046\001\002\000\004\002\045\001\002\000\004\002\000" +
    "\001\002\000\004\020\014\001\002\000\014\002\ufffc\003" +
    "\005\004\012\016\004\017\011\001\002\000\004\002\ufffb" +
    "\001\002\000\004\021\015\001\002\000\004\013\016\001" +
    "\002\000\006\006\017\013\021\001\002\000\016\007\uffe3" +
    "\010\uffe3\011\uffe3\012\uffe3\014\uffe3\015\uffe3\001\002\000" +
    "\014\007\024\010\023\011\025\012\027\015\034\001\002" +
    "\000\006\006\017\013\021\001\002\000\014\007\024\010" +
    "\023\011\025\012\027\014\026\001\002\000\006\006\017" +
    "\013\021\001\002\000\006\006\017\013\021\001\002\000" +
    "\006\006\017\013\021\001\002\000\016\007\uffe4\010\uffe4" +
    "\011\uffe4\012\uffe4\014\uffe4\015\uffe4\001\002\000\006\006" +
    "\017\013\021\001\002\000\016\007\uffe5\010\uffe5\011\uffe5" +
    "\012\uffe5\014\uffe5\015\uffe5\001\002\000\016\007\uffe6\010" +
    "\uffe6\011\uffe6\012\uffe6\014\uffe6\015\uffe6\001\002\000\016" +
    "\007\uffe8\010\uffe8\011\025\012\027\014\uffe8\015\uffe8\001" +
    "\002\000\016\007\uffe7\010\uffe7\011\025\012\027\014\uffe7" +
    "\015\uffe7\001\002\000\006\006\017\013\021\001\002\000" +
    "\014\007\024\010\023\011\025\012\027\015\036\001\002" +
    "\000\006\022\040\027\041\001\002\000\004\014\042\001" +
    "\002\000\004\014\ufff2\001\002\000\004\014\ufff1\001\002" +
    "\000\004\004\043\001\002\000\012\003\005\004\012\016" +
    "\004\017\011\001\002\000\004\002\ufffa\001\002\000\004" +
    "\002\001\001\002\000\014\002\ufffe\003\005\004\012\016" +
    "\004\017\011\001\002\000\004\002\ufffd\001\002\000\004" +
    "\004\051\001\002\000\012\003\005\004\012\016\004\017" +
    "\011\001\002\000\004\002\ufff8\001\002\000\004\013\140" +
    "\001\002\000\004\013\127\001\002\000\004\013\114\001" +
    "\002\000\004\013\101\001\002\000\004\013\060\001\002" +
    "\000\006\006\017\013\021\001\002\000\014\007\024\010" +
    "\023\011\025\012\027\015\062\001\002\000\006\006\017" +
    "\013\021\001\002\000\014\007\024\010\023\011\025\012" +
    "\027\015\064\001\002\000\006\006\017\013\021\001\002" +
    "\000\014\007\024\010\023\011\025\012\027\015\066\001" +
    "\002\000\022\030\067\031\070\032\077\033\075\034\074" +
    "\035\072\036\076\037\073\001\002\000\004\014\ufff0\001" +
    "\002\000\004\014\uffef\001\002\000\004\014\100\001\002" +
    "\000\004\014\uffeb\001\002\000\004\014\uffe9\001\002\000" +
    "\004\014\uffec\001\002\000\004\014\uffed\001\002\000\004" +
    "\014\uffea\001\002\000\004\014\uffee\001\002\000\006\002" +
    "\ufff6\004\ufff6\001\002\000\006\006\017\013\021\001\002" +
    "\000\014\007\024\010\023\011\025\012\027\015\103\001" +
    "\002\000\006\006\017\013\021\001\002\000\014\007\024" +
    "\010\023\011\025\012\027\015\105\001\002\000\006\006" +
    "\017\013\021\001\002\000\014\007\024\010\023\011\025" +
    "\012\027\015\107\001\002\000\006\006\017\013\021\001" +
    "\002\000\014\007\024\010\023\011\025\012\027\015\111" +
    "\001\002\000\022\030\067\031\070\032\077\033\075\034" +
    "\074\035\072\036\076\037\073\001\002\000\004\014\113" +
    "\001\002\000\006\002\ufff4\004\ufff4\001\002\000\006\006" +
    "\017\013\021\001\002\000\014\007\024\010\023\011\025" +
    "\012\027\015\116\001\002\000\006\006\017\013\021\001" +
    "\002\000\014\007\024\010\023\011\025\012\027\015\120" +
    "\001\002\000\006\006\017\013\021\001\002\000\014\007" +
    "\024\010\023\011\025\012\027\015\122\001\002\000\006" +
    "\006\017\013\021\001\002\000\014\007\024\010\023\011" +
    "\025\012\027\015\124\001\002\000\022\030\067\031\070" +
    "\032\077\033\075\034\074\035\072\036\076\037\073\001" +
    "\002\000\004\014\126\001\002\000\006\002\ufff5\004\ufff5" +
    "\001\002\000\006\006\017\013\021\001\002\000\014\007" +
    "\024\010\023\011\025\012\027\015\131\001\002\000\006" +
    "\006\017\013\021\001\002\000\014\007\024\010\023\011" +
    "\025\012\027\015\133\001\002\000\006\006\017\013\021" +
    "\001\002\000\014\007\024\010\023\011\025\012\027\015" +
    "\135\001\002\000\022\030\067\031\070\032\077\033\075" +
    "\034\074\035\072\036\076\037\073\001\002\000\004\014" +
    "\137\001\002\000\006\002\ufff7\004\ufff7\001\002\000\006" +
    "\006\017\013\021\001\002\000\014\007\024\010\023\011" +
    "\025\012\027\015\142\001\002\000\006\006\017\013\021" +
    "\001\002\000\014\007\024\010\023\011\025\012\027\015" +
    "\144\001\002\000\006\006\017\013\021\001\002\000\014" +
    "\007\024\010\023\011\025\012\027\015\146\001\002\000" +
    "\006\006\017\013\021\001\002\000\014\007\024\010\023" +
    "\011\025\012\027\015\150\001\002\000\006\006\017\013" +
    "\021\001\002\000\014\007\024\010\023\011\025\012\027" +
    "\015\152\001\002\000\022\030\067\031\070\032\077\033" +
    "\075\034\074\035\072\036\076\037\073\001\002\000\004" +
    "\014\154\001\002\000\006\002\ufff3\004\ufff3\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\152\000\010\002\006\003\007\005\005\001\001\000" +
    "\002\001\001\000\004\010\047\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\002\012\003\007\005\005\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\006\017\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\006\021" +
    "\001\001\000\002\001\001\000\004\006\032\001\001\000" +
    "\004\006\031\001\001\000\004\006\030\001\001\000\002" +
    "\001\001\000\004\006\027\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\006\034\001\001\000\002\001\001\000\004\004\036\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\002\043\003\007\005\005\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\002\046" +
    "\003\007\005\005\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\002\051\003\007\005\005\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\006\060" +
    "\001\001\000\002\001\001\000\004\006\062\001\001\000" +
    "\002\001\001\000\004\006\064\001\001\000\002\001\001" +
    "\000\004\007\070\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\006\101\001\001" +
    "\000\002\001\001\000\004\006\103\001\001\000\002\001" +
    "\001\000\004\006\105\001\001\000\002\001\001\000\004" +
    "\006\107\001\001\000\002\001\001\000\004\007\111\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\006\114" +
    "\001\001\000\002\001\001\000\004\006\116\001\001\000" +
    "\002\001\001\000\004\006\120\001\001\000\002\001\001" +
    "\000\004\006\122\001\001\000\002\001\001\000\004\007" +
    "\124\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\006\127\001\001\000\002\001\001\000\004\006\131\001" +
    "\001\000\002\001\001\000\004\006\133\001\001\000\002" +
    "\001\001\000\004\007\135\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\006\140\001\001\000\002\001\001" +
    "\000\004\006\142\001\001\000\002\001\001\000\004\006" +
    "\144\001\001\000\002\001\001\000\004\006\146\001\001" +
    "\000\002\001\001\000\004\006\150\001\001\000\002\001" +
    "\001\000\004\007\152\001\001\000\002\001\001\000\002" +
    "\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



public Sintactico(Lexico lex){
super(lex);
}

 /*Almacenamos todos los errores en un lista*/
    public String resultado="";

    public ArrayList<Ocurrencia> ocurrencias = new ArrayList<>();
    public ArrayList<Figuras> figurass = new ArrayList<>();
	public ArrayList<TError> errores = new ArrayList<>();
	public ArrayList<Animacion> animaciones = new ArrayList<>();
    private int[] usados = new int[2];
    
    private Symbol s;

    //Metodo que recupera un error en la sintaxis
    public void syntax_error(Symbol s){
        String lexema =String.valueOf(s.value);
        int fila = s.right;
        int columna = s.left;

        errores.add(new TError(lexema,fila,columna,"Error Sintactico","Se esperaba graficar o animar"));
		System.out.println("Se encontro un Error Sintactico: "+lexema+", en la linea: "+fila+", en la columna: "+columna);
        }

    //Método al que se llama automáticamente ante algún error sintáctico en el que ya no es posible una recuperación de errores.
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
        System.out.println("Error síntactico irrecuperable en la Línea "+(s.left+1)+" Columna "+(s.right+1)+". Componente "+s.value+" no reconocido."); 
    }
    
    //Metodo que recupera los errores
    public ArrayList<TError> getErrores(){
		return this.errores;
	}

    //Metodo que recupera las ocurrencias
    public ArrayList<Ocurrencia> getOcurrencias() {
        return this.ocurrencias;
    }

    //Metodo que recupera las figuras a graficar
	public ArrayList<Figuras> getFigurass() {
        return figurass;
    }
	
	//Metodo que recupera las animaciones 
	public ArrayList<Animacion> getAnimaciones() {
        return this.animaciones;
    }
    
    //metodo para recuperar los usos
 	public int[] gettUsados(){
 		return this.usados;
 	}
 	
    //Metodo que devuelve un float de un objeto
    public float getFloat(Object object){
		return Float.valueOf(String.valueOf(object));
	}

    //Metodo que devuelve un int de un objeto
    public int getInt(Object object){
		return Integer.valueOf(String.valueOf(object));
	}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Sintactico$actions {



  private final Sintactico parser;

  /** Constructor */
  CUP$Sintactico$actions(Sintactico parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Sintactico$do_action_part00000000(
    int                        CUP$Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico$parser,
    java.util.Stack            CUP$Sintactico$stack,
    int                        CUP$Sintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintactico$result;

      /* select the action based on the action number */
      switch (CUP$Sintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= s EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String start_val = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT = start_val;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintactico$parser.done_parsing();
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // s ::= exp 
            {
              String RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("s",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // exp ::= graficar 
            {
              String RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // exp ::= graficar SALTO 
            {
              String RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // exp ::= graficar SALTO s 
            {
              String RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // exp ::= SALTO 
            {
              String RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // exp ::= SALTO s 
            {
              String RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // exp ::= ANI OBJ ANT PAA accion COMA accion COMA animar PAC SALTO s 
            {
              String RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-11)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // NT$0 ::= 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
 System.out.println("Se encontro un ERROR SINTACTICO"); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$0",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // exp ::= error NT$0 SALTO s 
            {
              String RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // graficar ::= GRAF CIR PAA accion COMA accion COMA accion COMA color PAC 
            {
              String RESULT =null;
		int zleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)).left;
		int zright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)).right;
		String z = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)).value;
		int a1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).right;
		String a1 = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).value;
		int a2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int a2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		String a2 = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int a3left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int a3right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String a3 = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
                figurass.add(new Circulo(getFloat(a1),getFloat(a2),getFloat(a3),String.valueOf(c),a1left));   
                System.out.println("Se grafico un: "+String.valueOf(z));
                System.out.println("Cadena leida correctamente!");
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("graficar",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-10)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // graficar ::= GRAF CUADRA PAA accion COMA accion COMA accion COMA color PAC 
            {
              String RESULT =null;
		int zleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)).left;
		int zright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)).right;
		String z = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)).value;
		int a1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).right;
		String a1 = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).value;
		int a2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int a2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		String a2 = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int a3left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int a3right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String a3 = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
                figurass.add(new Cuadrado(getFloat(a1),getFloat(a2),getFloat(a3),String.valueOf(c),a1left));   
                System.out.println("Se grafico un: "+String.valueOf(z));
                System.out.println("Cadena leida correctamente!");
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("graficar",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-10)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // graficar ::= GRAF REC PAA accion COMA accion COMA accion COMA accion COMA color PAC 
            {
              String RESULT =null;
		int zleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-11)).left;
		int zright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-11)).right;
		String z = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-11)).value;
		int a1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)).right;
		String a1 = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)).value;
		int a2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).left;
		int a2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).right;
		String a2 = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).value;
		int a3left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int a3right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		String a3 = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int a4left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int a4right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String a4 = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
                figurass.add(new Rectangulo(getFloat(a1),getFloat(a2),getFloat(a3),getFloat(a4),String.valueOf(c),a1left));   
                System.out.println("Se grafico un: "+String.valueOf(z));
                System.out.println("Cadena leida correctamente");
            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("graficar",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-12)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // graficar ::= GRAF LINE PAA accion COMA accion COMA accion COMA accion COMA color PAC 
            {
              String RESULT =null;
		int zleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-11)).left;
		int zright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-11)).right;
		String z = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-11)).value;
		int a1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)).right;
		String a1 = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)).value;
		int a2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).left;
		int a2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).right;
		String a2 = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).value;
		int a3left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int a3right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		String a3 = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int a4left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int a4right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String a4 = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
                figurass.add(new Linea(getFloat(a1),getFloat(a2),getFloat(a3),getFloat(a4),String.valueOf(c),a1left));   
                System.out.println("Se grafico un: "+String.valueOf(z));
                System.out.println("Cadena leida correctamente");
            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("graficar",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-12)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // graficar ::= GRAF POL PAA accion COMA accion COMA accion COMA accion COMA accion COMA color PAC 
            {
              String RESULT =null;
		int zleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-13)).left;
		int zright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-13)).right;
		String z = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-13)).value;
		int a1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-11)).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-11)).right;
		String a1 = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-11)).value;
		int a2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)).left;
		int a2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)).right;
		String a2 = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)).value;
		int a3left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).left;
		int a3right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).right;
		String a3 = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).value;
		int a4left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int a4right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		String a4 = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int a5left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int a5right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String a5 = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
                figurass.add(new Poligono(getFloat(a1),getFloat(a2),getFloat(a3),getFloat(a4),getInt(a5),String.valueOf(c),a1left));   
                System.out.println("Se grafico un: "+String.valueOf(z));
                System.out.println("Cadena leida correctamente");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("graficar",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-14)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // animar ::= CUR 
            {
              String RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("animar",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // animar ::= LINE 
            {
              String RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("animar",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // color ::= CAZ 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=a; System.out.println("color es: "+RESULT); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("color",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // color ::= CR 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=a; System.out.println("color es: "+RESULT); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("color",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // color ::= CV 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=a; System.out.println("color es: "+RESULT); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("color",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // color ::= CAM 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=a; System.out.println("color es: "+RESULT); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("color",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // color ::= CNA 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=a; System.out.println("color es: "+RESULT); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("color",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // color ::= CM 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=a; System.out.println("color es: "+RESULT); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("color",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // color ::= CC 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=a; System.out.println("color es: "+RESULT); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("color",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // color ::= CNE 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=a; System.out.println("color es: "+RESULT); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("color",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // accion ::= accion SUMA accion 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 
                                    String occu="  "+a+"  "+op+"  "+b+"  ";
                                    ocurrencias.add(new Ocurrencia("+",opleft,opright,occu));
                                    double valor1 =Double.parseDouble(a); 
                                    double valor2 =Double.parseDouble(b); 
                                    double r=valor1 + valor2;
                                    RESULT=String.valueOf(r);
                                    System.out.println("Resultado es: "+RESULT); 
                                    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("accion",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // accion ::= accion RESTA accion 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                                    String occu="  "+a+"  "+op+"  "+b+"  ";
                                    ocurrencias.add(new Ocurrencia("-",opleft,opright,occu));
                                    double valor1 =Double.parseDouble(a); 
                                    double valor2 =Double.parseDouble(b); 
                                    double r= valor1-valor2;
                                    RESULT=String.valueOf(r);
                                    System.out.println("Resultado es: "+RESULT); 
                                    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("accion",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // accion ::= accion MUL accion 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 
                                    String occu="  "+a+"  "+op+"  "+b+"  ";
                                    ocurrencias.add(new Ocurrencia("*",opleft,opright,occu));
                                    double valor1 =Double.parseDouble(a); 
                                    double valor2 =Double.parseDouble(b); 
                                    double r= valor1*valor2;
                                    RESULT=String.valueOf(r);
                                    System.out.println("Resultado es: "+RESULT); 
                                    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("accion",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // accion ::= accion DIV accion 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 
                                    String occu="  "+a+"  "+op+"  "+b+"  ";
                                    ocurrencias.add(new Ocurrencia("/",opleft,opright,occu));
                                    double valor1 =Double.parseDouble(a); 
                                    double valor2 =Double.parseDouble(b); 
                                    double r= valor1/valor2;
                                    RESULT=String.valueOf(r);
                                    System.out.println("Resultado es: "+RESULT); 
                                    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("accion",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // accion ::= PAA accion PAC 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT =a; System.out.println("Parentesis en accion: "+RESULT);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("accion",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // accion ::= NUMERO 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=a; System.out.println("NUMERO INGRESADO es: "+RESULT); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("accion",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Sintactico$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Sintactico$do_action(
    int                        CUP$Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico$parser,
    java.util.Stack            CUP$Sintactico$stack,
    int                        CUP$Sintactico$top)
    throws java.lang.Exception
    {
              return CUP$Sintactico$do_action_part00000000(
                               CUP$Sintactico$act_num,
                               CUP$Sintactico$parser,
                               CUP$Sintactico$stack,
                               CUP$Sintactico$top);
    }
}

}
